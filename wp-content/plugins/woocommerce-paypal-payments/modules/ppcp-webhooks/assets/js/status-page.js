(()=>{var __webpack_modules__={281:()=>{eval("document.addEventListener('DOMContentLoaded', () => {\n  const resubscribeBtn = jQuery(PayPalCommerceGatewayWebhooksStatus.resubscribe.button);\n  resubscribeBtn.click(async () => {\n    resubscribeBtn.prop('disabled', true);\n    const response = await fetch(PayPalCommerceGatewayWebhooksStatus.resubscribe.endpoint, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        nonce: PayPalCommerceGatewayWebhooksStatus.resubscribe.nonce\n      })\n    });\n\n    const reportError = error => {\n      const msg = PayPalCommerceGatewayWebhooksStatus.resubscribe.failureMessage + ' ' + error;\n      alert(msg);\n    };\n\n    if (!response.ok) {\n      try {\n        const result = await response.json();\n        reportError(result.data);\n      } catch (exc) {\n        console.error(exc);\n        reportError(response.status);\n      }\n    }\n\n    window.location.reload();\n  });\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  const simulateBtn = jQuery(PayPalCommerceGatewayWebhooksStatus.simulation.start.button);\n  simulateBtn.click(async () => {\n    simulateBtn.prop('disabled', true);\n\n    try {\n      const response = await fetch(PayPalCommerceGatewayWebhooksStatus.simulation.start.endpoint, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          nonce: PayPalCommerceGatewayWebhooksStatus.simulation.start.nonce\n        })\n      });\n\n      const reportError = error => {\n        const msg = PayPalCommerceGatewayWebhooksStatus.simulation.start.failureMessage + ' ' + error;\n        alert(msg);\n      };\n\n      if (!response.ok) {\n        try {\n          const result = await response.json();\n          reportError(result.data);\n        } catch (exc) {\n          console.error(exc);\n          reportError(response.status);\n        }\n\n        return;\n      }\n\n      const showStatus = html => {\n        let statusBlock = simulateBtn.siblings('.ppcp-webhooks-status-text');\n\n        if (!statusBlock.length) {\n          statusBlock = jQuery('<div class=\"ppcp-webhooks-status-text\"></div>').insertAfter(simulateBtn);\n        }\n\n        statusBlock.html(html);\n      };\n\n      simulateBtn.siblings('.description').hide();\n      showStatus(PayPalCommerceGatewayWebhooksStatus.simulation.state.waitingMessage + '<span class=\"spinner is-active\" style=\"float: none;\"></span>');\n      const delay = 2000;\n      const retriesBeforeErrorMessage = 15;\n      const maxRetries = 30;\n\n      for (let i = 0; i < maxRetries; i++) {\n        await sleep(delay);\n        const stateResponse = await fetch(PayPalCommerceGatewayWebhooksStatus.simulation.state.endpoint, {\n          method: 'GET'\n        });\n\n        try {\n          const result = await stateResponse.json();\n\n          if (!stateResponse.ok || !result.success) {\n            console.error('Simulation state query failed: ' + result.data);\n            continue;\n          }\n\n          const state = result.data.state;\n\n          if (state === PayPalCommerceGatewayWebhooksStatus.simulation.state.successState) {\n            showStatus('<span class=\"success\">' + '✔️ ' + PayPalCommerceGatewayWebhooksStatus.simulation.state.successMessage + '</span>');\n            return;\n          }\n        } catch (exc) {\n          console.error(exc);\n        }\n\n        if (i === retriesBeforeErrorMessage) {\n          showStatus('<span class=\"error\">' + PayPalCommerceGatewayWebhooksStatus.simulation.state.tooLongDelayMessage + '</span>');\n        }\n      }\n    } finally {\n      simulateBtn.prop('disabled', false);\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///281\n")}},__webpack_exports__={};__webpack_modules__[281]()})();